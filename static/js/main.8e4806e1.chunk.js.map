{"version":3,"sources":["Web3Client.js","App.js","reportWebVitals.js","index.js"],"names":["erc20Abi","gameAbi","depositFund","a","window","ethereum","request","method","accounts","console","log","provider","ethers","providers","Web3Provider","signer","getSigner","tokenContract","Contract","approve","gameContract","deposit","getOwnBalance","App","useState","balance","setBalance","className","onClick","then","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qjBA0DMA,EAAW,CAChB,CACC,UAAY,EACZ,OAAU,CACT,CAAC,KAAQ,WAAY,KAAQ,WAC7B,CAAC,KAAQ,SAAU,KAAQ,YAE5B,KAAQ,UACR,QAAW,CACV,CAAC,KAAQ,GAAI,KAAQ,SAEtB,SAAW,EACX,gBAAmB,aACnB,KAAQ,YAET,CACC,UAAY,EACZ,OAAU,CACT,CAAC,KAAQ,SAAU,KAAQ,WAC3B,CAAC,KAAQ,WAAY,KAAQ,YAE9B,KAAQ,YACR,QAAW,CACV,CAAC,KAAQ,GAAI,KAAQ,YAEtB,SAAW,EACX,gBAAmB,OACnB,KAAQ,aAIJC,EAAU,CACf,CACC,OAAU,CACT,CAAC,aAAgB,UAAW,KAAQ,UAAW,KAAQ,YAExD,KAAQ,UACR,QAAW,GACX,gBAAmB,UACnB,KAAQ,YAET,CACC,OAAU,CACT,CAAC,aAAgB,UAAW,KAAQ,SAAU,KAAQ,WACtD,CAAC,aAAgB,UAAW,KAAQ,OAAQ,KAAQ,WACpD,CAAC,aAAgB,QAAS,KAAQ,OAAQ,KAAQ,UAEnD,KAAQ,WACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAET,CAAC,gBAAmB,UAAW,KAAQ,WACvC,CACC,OAAU,GACV,KAAQ,aACR,QAAW,CACV,CAAC,aAAgB,UAAW,KAAQ,GAAI,KAAQ,YAEjD,gBAAmB,OACnB,KAAQ,aAQGC,EAAW,uCAAG,wCAAAC,EAAA,sDAET,GAFS,WAELC,SAAZC,EAAQ,EAARA,UAEI,CAAD,gCACaA,EAASC,QAAQ,CAACC,OAAQ,wBAAwB,KAAD,EAM9C,OANpBC,EAAQ,OACdC,QAAQC,IAAI,cAAgBF,GAEtBG,EAAW,IAAIC,IAAOC,UAAUC,aAAaT,GAC7CU,EAASJ,EAASK,YAClBC,EAAgB,IAAIL,IAAOM,SAbP,6CAasClB,EAAUe,GAC1EN,QAAQC,IAAIO,GAAc,UACpBA,EAAcE,QAAQX,EAAS,GAAI,EAAG,CAAC,SAAY,MAAU,KAAD,GAGzC,OADnBY,EAAe,IAAIR,IAAOM,SAhBP,6CAgBqCjB,EAASc,GACvEN,QAAQC,IAAIU,GAAa,UACnBA,EAAaC,QAAQ,GAAG,KAAD,2BAG7BZ,QAAQC,IAAI,kCAAkC,0DAG/CD,QAAQC,IAAI,EAAD,IAAI,0DAEhB,kBAxBuB,mCA0BXY,EAAa,uCAAG,sBAAAnB,EAAA,sEAErBD,IAAc,KAAD,sCAmCpB,kBArCyB,mC,QC9GXqB,MAtCf,WAEC,MAA8BC,mBAAS,GAAE,mBAAlCC,EAAO,KAAEC,EAAU,KAuB1B,OACC,sBAAKC,UAAU,MAAK,UAMnB,iDAAoBF,KACpB,wBAAQG,QAAS,WAjBlBN,IACEO,MAAK,SAACJ,GACNC,EAAWD,MAEXK,OAAM,SAACC,GACPtB,QAAQC,IAAIqB,OAYyB,iCCzB1BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBL,MAAK,YAAkD,IAA/CM,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8e4806e1.chunk.js","sourcesContent":["// import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from 'web3';\nimport { ethers } from 'ethers';\n\nlet selectedAccount;\n\n// let nftContract;\nlet erc20Contract;\nlet gameContract;\n\nlet isInitialized = false;\n\nexport const init = async () => {\n\tlet provider = window.ethereum;\n\n\tif (typeof provider !== 'undefined') {\n\t\tprovider\n\t\t\t.request({ method: 'eth_requestAccounts' })\n\t\t\t.then((accounts) => {\n\t\t\t\tselectedAccount = accounts[0];\n\t\t\t\tconsole.log(`Selected account is ${selectedAccount}`);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn;\n\t\t\t});\n\n\t\twindow.ethereum.on('accountsChanged', function (accounts) {\n\t\t\tselectedAccount = accounts[0];\n\t\t\tconsole.log(`Selected account changed to ${selectedAccount}`);\n\t\t});\n\t}\n\n\tconst web3 = new Web3(provider);\n\n\tconst networkId = await web3.eth.net.getId();\n\n\t// nftContract = new web3.eth.Contract(\n\t// \tNFTContractBuild.abi,\n\t// \tNFTContractBuild.networks[networkId].address\n\t// );\n\n\n\terc20Contract = new web3.eth.Contract(\n\t\terc20Abi,\n\t\t// Dai contract on Rinkeby\n\t\t'0x06C04B0AD236e7Ca3B3189b1d049FE80109C7977'\n\t);\n\n\tgameContract = new web3.eth.Contract(\n\t\tgameAbi,\n\t\t// Dai contract on Rinkeby\n\t\t'0x61dd8354917c92f986BA81f2222Ac033A4Bb1521'\n\t);\n\n\tisInitialized = true;\n};\n\nconst erc20Abi = [\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\"name\": \"_spender\", \"type\": \"address\"},\n\t\t\t{\"name\": \"_value\", \"type\": \"uint256\"}\n\t\t],\n\t\t\"name\": \"approve\",\n\t\t\"outputs\": [\n\t\t\t{\"name\": \"\", \"type\": \"bool\"}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\"name\": \"_owner\", \"type\": \"address\"},\n\t\t\t{\"name\": \"_spender\", \"type\": \"address\"}\n\t\t],\n\t\t\"name\": \"allowance\",\n\t\t\"outputs\": [\n\t\t\t{\"name\": \"\", \"type\": \"uint256\"}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n];\n\nconst gameAbi = [\n\t{\n\t\t\"inputs\": [\n\t\t\t{\"internalType\": \"uint256\", \"name\": \"amount_\", \"type\": \"uint256\"}\n\t\t],\n\t\t\"name\": \"deposit\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\"},\n\t\t\t{\"internalType\": \"uint256\", \"name\": \"time\", \"type\": \"uint256\"},\n\t\t\t{\"internalType\": \"bytes\", \"name\": \"sign\", \"type\": \"bytes\"}\n\t\t],\n\t\t\"name\": \"withdraw\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\"stateMutability\": \"payable\", \"type\": \"receive\"},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"depositFee\",\n\t\t\"outputs\": [\n\t\t\t{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\n\n\nconst tokenContractAddress = '0x06C04B0AD236e7Ca3B3189b1d049FE80109C7977';\nconst gameContractAddress = '0x61dd8354917c92f986BA81f2222Ac033A4Bb1521';\n\nexport const depositFund = async () =>{\n\ttry {\n\t\tconst  {ethereum} = window;\n\n\t\tif(ethereum) {\n\t\t\tconst accounts = await ethereum.request({method: 'eth_requestAccounts'});\n\t\t\tconsole.log('accounts : ' + accounts);\n\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst tokenContract = new ethers.Contract(tokenContractAddress, erc20Abi, signer);\n\t\t\tconsole.log(tokenContract)\n\t\t\tawait tokenContract.approve(accounts[0], 1, {'gasLimit': 1000000});\n\n\t\t\tconst gameContract = new ethers.Contract(gameContractAddress, gameAbi, signer);\n\t\t\tconsole.log(gameContract)\n\t\t\tawait gameContract.deposit(1);\n\n\t\t} else {\n\t\t\tconsole.log(\"Ethereum object does not exist\");\n\t\t}\n\t} catch (e) {\n\t\tconsole.log(e);\n\t}\n}\n\nexport const getOwnBalance = async () => {\n\t//if (!isInitialized) {\n\t\tawait depositFund();\n\t//}\n/*\tconsole.log(erc20Contract);\n\tconsole.log(erc20Contract.methods);\n\tconsole.log(`Selected account is ${selectedAccount}`);\n\tvar gas = {\"gasLimit\":30000};\n\n\treturn gameContract.methods\n\t\t.deposit(1)\n\t\t.call()\n\t\t.then((balance) => {\n\t\t\tconsole.log('balance : ' + JSON.stringify(balance));\n\t\t});\n\n\tawait erc20Contract.methods.approve(selectedAccount, 1).send();*/\n\t//await gameContract.methods.deposit(1).send({from: selectedAccount});\n\n\n/*\terc20Contract.methods\n\t\t.approve(selectedAccount, 1)\n\t\t.call()\n\t\t.then(([balance, d],) => {\n\t\t\tconsole.log('balance : ' + JSON.stringify(balance));\n\t\t\t//return 0;//Web3.utils.fromWei(balance.);\n\t\t\tconsole.log(gameContract);\n\t\t\tconsole.log(gameContract.methods);\n\t\t\treturn gameContract.methods\n\t\t\t\t.deposit(selectedAccount)\n\t\t\t\t.call([1])\n\t\t\t\t.then((balance) => {\n\t\t\t\t\tconsole.log('balance : ' + JSON.stringify(balance));\n\t\t\t\t});\n\t\t});*/\n\n\n};\n\n// export const mintToken = async () => {\n// \tif (!isInitialized) {\n// \t\tawait init();\n// \t}\n\n// \treturn nftContract.methods\n// \t\t.mint(selectedAccount)\n// \t\t.send({ from: selectedAccount });\n// };\n","import React, { useState } from 'react';\n\nimport { getOwnBalance } from './Web3Client';\n\nfunction App() {\n\t// const [minted, setMinted] = useState(false);\n\tconst [balance, setBalance] = useState(0);\n\n\t// const mint = () => {\n\t// \tmintToken()\n\t// \t\t.then((tx) => {\n\t// \t\t\tconsole.log(tx);\n\t// \t\t\tsetMinted(true);\n\t// \t\t})\n\t// \t\t.catch((err) => {\n\t// \t\t\tconsole.log(err);\n\t// \t\t});\n\t// };\n\n\tconst fetchBalance = () => {\n\t\tgetOwnBalance()\n\t\t\t.then((balance) => {\n\t\t\t\tsetBalance(balance);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* {!minted ? (\n\t\t\t\t<button onClick={() => mint()}>Mint token</button>\n\t\t\t) : (\n\t\t\t\t<p>Token minted successfully!</p>\n\t\t\t)} */}\n\t\t\t<p>Your balance is {balance}</p>\n\t\t\t<button onClick={() => fetchBalance()}>Refresh balance</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}